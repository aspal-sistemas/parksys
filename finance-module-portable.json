{
  "name": "Finance Module - Parks Management System",
  "version": "1.0.0",
  "description": "Complete finance management module for municipal parks system",
  "export_date": "2025-01-12",
  
  "installation": {
    "method": "Copy and paste files",
    "estimated_time": "10 minutes",
    "requires_database": true,
    "requires_dependencies": ["@tanstack/react-query", "lucide-react", "drizzle-orm"]
  },

  "files": {
    "shared/finance-schema.ts": "import { pgTable, text, serial, integer, boolean, timestamp, varchar, date, decimal } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Categorías de ingresos\nexport const incomeCategories = pgTable(\"income_categories\", {\n  id: serial(\"id\").primaryKey(),\n  code: varchar(\"code\", { length: 20 }).notNull().unique(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  description: text(\"description\"),\n  level: integer(\"level\").default(1),\n  isActive: boolean(\"is_active\").default(true),\n  sortOrder: integer(\"sort_order\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Categorías de egresos\nexport const expenseCategories = pgTable(\"expense_categories\", {\n  id: serial(\"id\").primaryKey(),\n  code: varchar(\"code\", { length: 20 }).notNull().unique(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  description: text(\"description\"),\n  level: integer(\"level\").default(1),\n  isActive: boolean(\"is_active\").default(true),\n  sortOrder: integer(\"sort_order\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Ingresos reales\nexport const actualIncomes = pgTable(\"actual_incomes\", {\n  id: serial(\"id\").primaryKey(),\n  parkId: integer(\"park_id\").notNull(),\n  categoryId: integer(\"category_id\").references(() => incomeCategories.id),\n  concept: varchar(\"concept\", { length: 200 }).notNull(),\n  amount: decimal(\"amount\", { precision: 15, scale: 2 }).notNull(),\n  date: date(\"date\").notNull(),\n  month: integer(\"month\").notNull(),\n  year: integer(\"year\").notNull(),\n  description: text(\"description\"),\n  referenceNumber: varchar(\"reference_number\", { length: 50 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Egresos reales\nexport const actualExpenses = pgTable(\"actual_expenses\", {\n  id: serial(\"id\").primaryKey(),\n  parkId: integer(\"park_id\").notNull(),\n  categoryId: integer(\"category_id\").references(() => expenseCategories.id),\n  concept: varchar(\"concept\", { length: 200 }).notNull(),\n  amount: decimal(\"amount\", { precision: 15, scale: 2 }).notNull(),\n  date: date(\"date\").notNull(),\n  month: integer(\"month\").notNull(),\n  year: integer(\"year\").notNull(),\n  supplier: varchar(\"supplier\", { length: 200 }),\n  description: text(\"description\"),\n  referenceNumber: varchar(\"reference_number\", { length: 50 }),\n  isPaid: boolean(\"is_paid\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Schemas de validación\nexport const insertIncomeCategorySchema = createInsertSchema(incomeCategories);\nexport const insertExpenseCategorySchema = createInsertSchema(expenseCategories);\nexport const insertActualIncomeSchema = createInsertSchema(actualIncomes);\nexport const insertActualExpenseSchema = createInsertSchema(actualExpenses);\n\nexport type InsertIncomeCategory = z.infer<typeof insertIncomeCategorySchema>;\nexport type InsertExpenseCategory = z.infer<typeof insertExpenseCategorySchema>;\nexport type InsertActualIncome = z.infer<typeof insertActualIncomeSchema>;\nexport type InsertActualExpense = z.infer<typeof insertActualExpenseSchema>;\nexport type IncomeCategory = typeof incomeCategories.$inferSelect;\nexport type ExpenseCategory = typeof expenseCategories.$inferSelect;",

    "server/finance-routes.ts": "import { Router, Request, Response } from \"express\";\nimport { db } from \"./db\";\nimport { incomeCategories, expenseCategories, actualIncomes, actualExpenses } from \"@shared/finance-schema\";\nimport { eq, desc, sql } from \"drizzle-orm\";\n\nexport function registerFinanceRoutes(app: any, apiRouter: Router, isAuthenticated: any) {\n  console.log(\"Registrando rutas del módulo financiero...\");\n\n  // Obtener categorías de ingresos\n  apiRouter.get(\"/finance/income-categories\", async (_req: Request, res: Response) => {\n    try {\n      const categories = await db.select().from(incomeCategories).where(eq(incomeCategories.isActive, true));\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error al obtener categorías de ingresos:\", error);\n      res.status(500).json({ message: \"Error al obtener categorías\" });\n    }\n  });\n\n  // Crear categoría de ingresos\n  apiRouter.post(\"/finance/income-categories\", isAuthenticated, async (req: Request, res: Response) => {\n    try {\n      const { name, description } = req.body;\n      if (!name || name.trim() === '') {\n        return res.status(400).json({ message: \"El nombre es requerido\" });\n      }\n      \n      const existingCategories = await db.select().from(incomeCategories);\n      const code = `ING${(existingCategories.length + 1).toString().padStart(3, '0')}`;\n      \n      const [newCategory] = await db.insert(incomeCategories).values({\n        code,\n        name: name.trim(),\n        description: description?.trim() || '',\n        level: 1,\n        isActive: true,\n        sortOrder: existingCategories.length + 1\n      }).returning();\n      \n      res.status(201).json(newCategory);\n    } catch (error) {\n      console.error(\"Error al crear categoría:\", error);\n      res.status(500).json({ message: \"Error al crear categoría\" });\n    }\n  });\n\n  // Obtener categorías de egresos\n  apiRouter.get(\"/finance/expense-categories\", async (_req: Request, res: Response) => {\n    try {\n      const categories = await db.select().from(expenseCategories).where(eq(expenseCategories.isActive, true));\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error al obtener categorías de egresos:\", error);\n      res.status(500).json({ message: \"Error al obtener categorías\" });\n    }\n  });\n\n  // Crear categoría de egresos\n  apiRouter.post(\"/finance/expense-categories\", isAuthenticated, async (req: Request, res: Response) => {\n    try {\n      const { name, description } = req.body;\n      if (!name || name.trim() === '') {\n        return res.status(400).json({ message: \"El nombre es requerido\" });\n      }\n      \n      const existingCategories = await db.select().from(expenseCategories);\n      const code = `EGR${(existingCategories.length + 1).toString().padStart(3, '0')}`;\n      \n      const [newCategory] = await db.insert(expenseCategories).values({\n        code,\n        name: name.trim(),\n        description: description?.trim() || '',\n        level: 1,\n        isActive: true,\n        sortOrder: existingCategories.length + 1\n      }).returning();\n      \n      res.status(201).json(newCategory);\n    } catch (error) {\n      console.error(\"Error al crear categoría:\", error);\n      res.status(500).json({ message: \"Error al crear categoría\" });\n    }\n  });\n\n  // Obtener ingresos reales\n  apiRouter.get(\"/finance/actual-incomes\", async (req: Request, res: Response) => {\n    try {\n      const { year = new Date().getFullYear(), parkId } = req.query;\n      let query = db.select().from(actualIncomes);\n      \n      if (year) {\n        query = query.where(eq(actualIncomes.year, parseInt(year as string)));\n      }\n      \n      const incomes = await query.orderBy(desc(actualIncomes.date));\n      res.json(incomes);\n    } catch (error) {\n      console.error(\"Error al obtener ingresos:\", error);\n      res.status(500).json({ message: \"Error al obtener ingresos\" });\n    }\n  });\n\n  // Crear ingreso real\n  apiRouter.post(\"/finance/actual-incomes\", isAuthenticated, async (req: Request, res: Response) => {\n    try {\n      const incomeData = req.body;\n      const [newIncome] = await db.insert(actualIncomes).values(incomeData).returning();\n      res.status(201).json(newIncome);\n    } catch (error) {\n      console.error(\"Error al crear ingreso:\", error);\n      res.status(500).json({ message: \"Error al crear ingreso\" });\n    }\n  });\n\n  // Obtener egresos reales\n  apiRouter.get(\"/finance/actual-expenses\", async (req: Request, res: Response) => {\n    try {\n      const { year = new Date().getFullYear(), parkId } = req.query;\n      let query = db.select().from(actualExpenses);\n      \n      if (year) {\n        query = query.where(eq(actualExpenses.year, parseInt(year as string)));\n      }\n      \n      const expenses = await query.orderBy(desc(actualExpenses.date));\n      res.json(expenses);\n    } catch (error) {\n      console.error(\"Error al obtener egresos:\", error);\n      res.status(500).json({ message: \"Error al obtener egresos\" });\n    }\n  });\n\n  // Crear egreso real\n  apiRouter.post(\"/finance/actual-expenses\", isAuthenticated, async (req: Request, res: Response) => {\n    try {\n      const expenseData = req.body;\n      const [newExpense] = await db.insert(actualExpenses).values(expenseData).returning();\n      res.status(201).json(newExpense);\n    } catch (error) {\n      console.error(\"Error al crear egreso:\", error);\n      res.status(500).json({ message: \"Error al crear egreso\" });\n    }\n  });\n\n  // Métricas del dashboard\n  apiRouter.get(\"/finance/dashboard-metrics\", async (req: Request, res: Response) => {\n    try {\n      const currentYear = new Date().getFullYear();\n      \n      const totalIncomes = await db.execute(sql`\n        SELECT COALESCE(SUM(amount), 0) as total \n        FROM actual_incomes \n        WHERE year = ${currentYear}\n      `);\n      \n      const totalExpenses = await db.execute(sql`\n        SELECT COALESCE(SUM(amount), 0) as total \n        FROM actual_expenses \n        WHERE year = ${currentYear}\n      `);\n      \n      const metrics = {\n        totalIncome: Number(totalIncomes[0]?.total || 0),\n        totalExpenses: Number(totalExpenses[0]?.total || 0),\n        netBalance: Number(totalIncomes[0]?.total || 0) - Number(totalExpenses[0]?.total || 0)\n      };\n      \n      res.json(metrics);\n    } catch (error) {\n      console.error(\"Error al obtener métricas:\", error);\n      res.status(500).json({ message: \"Error al obtener métricas\" });\n    }\n  });\n\n  console.log(\"✅ Rutas del módulo financiero registradas exitosamente\");\n}",

    "client/src/pages/admin/finance/dashboard.tsx": "import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { DollarSign, TrendingUp, TrendingDown, BarChart3, Plus } from \"lucide-react\";\nimport AdminLayout from \"@/components/AdminLayout\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nconst FinanceDashboard = () => {\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\n\n  const { data: metrics, isLoading } = useQuery({\n    queryKey: ['/api/finance/dashboard-metrics'],\n    enabled: true\n  });\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('es-MX', {\n      style: 'currency',\n      currency: 'MXN'\n    }).format(amount);\n  };\n\n  const kpis = [\n    {\n      title: \"Ingresos Totales\",\n      value: formatCurrency(metrics?.totalIncome || 0),\n      icon: DollarSign,\n      color: \"text-green-600\",\n      bgColor: \"bg-green-100\"\n    },\n    {\n      title: \"Egresos Totales\", \n      value: formatCurrency(metrics?.totalExpenses || 0),\n      icon: TrendingDown,\n      color: \"text-red-600\",\n      bgColor: \"bg-red-100\"\n    },\n    {\n      title: \"Balance Neto\",\n      value: formatCurrency(metrics?.netBalance || 0),\n      icon: TrendingUp,\n      color: metrics?.netBalance >= 0 ? \"text-blue-600\" : \"text-red-600\",\n      bgColor: metrics?.netBalance >= 0 ? \"bg-blue-100\" : \"bg-red-100\"\n    },\n    {\n      title: \"Año Fiscal\",\n      value: selectedYear.toString(),\n      icon: BarChart3,\n      color: \"text-purple-600\",\n      bgColor: \"bg-purple-100\"\n    }\n  ];\n\n  if (isLoading) {\n    return (\n      <AdminLayout>\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-gray-500\">Cargando dashboard financiero...</div>\n        </div>\n      </AdminLayout>\n    );\n  }\n\n  return (\n    <AdminLayout>\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 bg-green-100 rounded-lg\">\n              <DollarSign className=\"h-6 w-6 text-green-600\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">\n                Dashboard Financiero\n              </h1>\n              <p className=\"text-gray-600\">\n                Gestión integral de finanzas del parque\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* KPIs */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {kpis.map((kpi, index) => {\n            const IconComponent = kpi.icon;\n            return (\n              <Card key={index}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className={`p-3 rounded-lg ${kpi.bgColor}`}>\n                      <IconComponent className={`h-6 w-6 ${kpi.color}`} />\n                    </div>\n                  </div>\n                  <div className=\"mt-4\">\n                    <h3 className=\"text-sm font-medium text-gray-600\">{kpi.title}</h3>\n                    <p className=\"text-2xl font-bold text-gray-900 mt-1\">\n                      {kpi.value}\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Acciones y Resumen */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Acciones Rápidas</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <Button \n                className=\"w-full justify-start\" \n                variant=\"outline\"\n                onClick={() => window.location.href = '/admin/finance/incomes'}\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Registrar Ingreso\n              </Button>\n              <Button \n                className=\"w-full justify-start\" \n                variant=\"outline\"\n                onClick={() => window.location.href = '/admin/finance/expenses'}\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Registrar Egreso\n              </Button>\n              <Button \n                className=\"w-full justify-start\" \n                variant=\"outline\"\n                onClick={() => window.location.href = '/admin/finance/catalog'}\n              >\n                <BarChart3 className=\"h-4 w-4 mr-2\" />\n                Gestionar Categorías\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Resumen del Mes Actual</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Ingresos promedio mensual:</span>\n                  <span className=\"font-semibold text-green-600\">\n                    {formatCurrency((metrics?.totalIncome || 0) / 12)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Egresos promedio mensual:</span>\n                  <span className=\"font-semibold text-red-600\">\n                    {formatCurrency((metrics?.totalExpenses || 0) / 12)}\n                  </span>\n                </div>\n                <div className=\"border-t pt-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-900 font-medium\">Balance promedio mensual:</span>\n                    <span className={`font-bold ${(metrics?.netBalance || 0) >= 0 ? 'text-blue-600' : 'text-red-600'}`}>\n                      {formatCurrency((metrics?.netBalance || 0) / 12)}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </AdminLayout>\n  );\n};\n\nexport default FinanceDashboard;",

    "client/src/pages/admin/finance/catalog.tsx": "import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Plus, Edit, BookOpen } from \"lucide-react\";\nimport AdminLayout from \"@/components/AdminLayout\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst FinanceCatalog = () => {\n  const [activeTab, setActiveTab] = useState(\"income\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [formData, setFormData] = useState({ name: '', description: '' });\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Obtener categorías de ingresos\n  const { data: incomeCategories = [] } = useQuery({\n    queryKey: ['/api/finance/income-categories'],\n    enabled: true\n  });\n\n  // Obtener categorías de egresos\n  const { data: expenseCategories = [] } = useQuery({\n    queryKey: ['/api/finance/expense-categories'],\n    enabled: true\n  });\n\n  // Mutación para crear categoría de ingresos\n  const createIncomeCategoryMutation = useMutation({\n    mutationFn: async (data: { name: string; description: string }) => {\n      const response = await fetch('/api/finance/income-categories', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) throw new Error('Error al crear categoría');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/finance/income-categories'] });\n      toast({ title: \"Categoría de ingresos creada exitosamente\" });\n      setIsDialogOpen(false);\n      setFormData({ name: '', description: '' });\n    },\n    onError: () => {\n      toast({ title: \"Error al crear categoría\", variant: \"destructive\" });\n    }\n  });\n\n  // Mutación para crear categoría de egresos\n  const createExpenseCategoryMutation = useMutation({\n    mutationFn: async (data: { name: string; description: string }) => {\n      const response = await fetch('/api/finance/expense-categories', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) throw new Error('Error al crear categoría');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/finance/expense-categories'] });\n      toast({ title: \"Categoría de egresos creada exitosamente\" });\n      setIsDialogOpen(false);\n      setFormData({ name: '', description: '' });\n    },\n    onError: () => {\n      toast({ title: \"Error al crear categoría\", variant: \"destructive\" });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.name.trim()) return;\n    \n    if (activeTab === \"income\") {\n      createIncomeCategoryMutation.mutate(formData);\n    } else {\n      createExpenseCategoryMutation.mutate(formData);\n    }\n  };\n\n  return (\n    <AdminLayout>\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 bg-blue-100 rounded-lg\">\n              <BookOpen className=\"h-6 w-6 text-blue-600\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">\n                Catálogo Financiero\n              </h1>\n              <p className=\"text-gray-600\">\n                Gestión de categorías de ingresos y egresos\n              </p>\n            </div>\n          </div>\n\n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <Button>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Nueva Categoría\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>\n                  Nueva Categoría de {activeTab === \"income\" ? \"Ingresos\" : \"Egresos\"}\n                </DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"name\">Nombre de la Categoría</Label>\n                  <Input\n                    id=\"name\"\n                    value={formData.name}\n                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                    placeholder=\"Ej: Servicios del Parque\"\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"description\">Descripción</Label>\n                  <Input\n                    id=\"description\"\n                    value={formData.description}\n                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                    placeholder=\"Descripción detallada de la categoría\"\n                  />\n                </div>\n                <div className=\"flex justify-end gap-2\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n                    Cancelar\n                  </Button>\n                  <Button type=\"submit\" disabled={createIncomeCategoryMutation.isPending || createExpenseCategoryMutation.isPending}>\n                    {(createIncomeCategoryMutation.isPending || createExpenseCategoryMutation.isPending) ? \"Creando...\" : \"Crear Categoría\"}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"income\">Categorías de Ingresos</TabsTrigger>\n            <TabsTrigger value=\"expenses\">Categorías de Egresos</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"income\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Categorías de Ingresos ({incomeCategories.length})</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {incomeCategories.map((category: any) => (\n                    <Card key={category.id} className=\"border-l-4 border-l-green-500\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-semibold text-gray-900\">{category.name}</h4>\n                            <p className=\"text-sm text-gray-600 mt-1\">{category.code}</p>\n                            {category.description && (\n                              <p className=\"text-sm text-gray-500 mt-2\">{category.description}</p>\n                            )}\n                          </div>\n                          <Button size=\"sm\" variant=\"ghost\">\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n                {incomeCategories.length === 0 && (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    No hay categorías de ingresos registradas\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"expenses\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Categorías de Egresos ({expenseCategories.length})</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {expenseCategories.map((category: any) => (\n                    <Card key={category.id} className=\"border-l-4 border-l-red-500\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-semibold text-gray-900\">{category.name}</h4>\n                            <p className=\"text-sm text-gray-600 mt-1\">{category.code}</p>\n                            {category.description && (\n                              <p className=\"text-sm text-gray-500 mt-2\">{category.description}</p>\n                            )}\n                          </div>\n                          <Button size=\"sm\" variant=\"ghost\">\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n                {expenseCategories.length === 0 && (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    No hay categorías de egresos registradas\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </AdminLayout>\n  );\n};\n\nexport default FinanceCatalog;"
  },

  "database_sql": "-- Crear tablas del módulo de finanzas\nCREATE TABLE IF NOT EXISTS income_categories (\n  id SERIAL PRIMARY KEY,\n  code VARCHAR(20) NOT NULL UNIQUE,\n  name VARCHAR(100) NOT NULL,\n  description TEXT,\n  level INTEGER DEFAULT 1,\n  is_active BOOLEAN DEFAULT true,\n  sort_order INTEGER DEFAULT 0,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE TABLE IF NOT EXISTS expense_categories (\n  id SERIAL PRIMARY KEY,\n  code VARCHAR(20) NOT NULL UNIQUE,\n  name VARCHAR(100) NOT NULL,\n  description TEXT,\n  level INTEGER DEFAULT 1,\n  is_active BOOLEAN DEFAULT true,\n  sort_order INTEGER DEFAULT 0,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE TABLE IF NOT EXISTS actual_incomes (\n  id SERIAL PRIMARY KEY,\n  park_id INTEGER NOT NULL,\n  category_id INTEGER REFERENCES income_categories(id),\n  concept VARCHAR(200) NOT NULL,\n  amount DECIMAL(15,2) NOT NULL,\n  date DATE NOT NULL,\n  month INTEGER NOT NULL,\n  year INTEGER NOT NULL,\n  description TEXT,\n  reference_number VARCHAR(50),\n  created_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE TABLE IF NOT EXISTS actual_expenses (\n  id SERIAL PRIMARY KEY,\n  park_id INTEGER NOT NULL,\n  category_id INTEGER REFERENCES expense_categories(id),\n  concept VARCHAR(200) NOT NULL,\n  amount DECIMAL(15,2) NOT NULL,\n  date DATE NOT NULL,\n  month INTEGER NOT NULL,\n  year INTEGER NOT NULL,\n  supplier VARCHAR(200),\n  description TEXT,\n  reference_number VARCHAR(50),\n  is_paid BOOLEAN DEFAULT false,\n  created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Datos de muestra\nINSERT INTO income_categories (code, name, description, level, is_active, sort_order) VALUES\n('ING001', 'Servicios del Parque', 'Ingresos por servicios ofrecidos en el parque', 1, true, 1),\n('ING002', 'Concesiones', 'Ingresos por concesiones comerciales', 1, true, 2),\n('ING003', 'Eventos Especiales', 'Ingresos por eventos y actividades especiales', 1, true, 3),\n('ING004', 'Donaciones', 'Donaciones y aportes voluntarios', 1, true, 4);\n\nINSERT INTO expense_categories (code, name, description, level, is_active, sort_order) VALUES\n('EGR001', 'Personal', 'Gastos de nómina y prestaciones del personal', 1, true, 1),\n('EGR002', 'Mantenimiento', 'Gastos de mantenimiento de instalaciones', 1, true, 2),\n('EGR003', 'Servicios Públicos', 'Agua, electricidad, gas y telecomunicaciones', 1, true, 3),\n('EGR004', 'Materiales y Suministros', 'Compra de materiales diversos', 1, true, 4),\n('EGR005', 'Seguridad', 'Gastos de seguridad y vigilancia', 1, true, 5);",

  "app_routes": "// Agregar a client/src/App.tsx\n// En la sección de rutas:\n\n<Route path=\"/admin/finance/dashboard\">\n  <Suspense fallback={<div className=\"p-8 text-center\">Cargando dashboard financiero...</div>}>\n    {React.createElement(React.lazy(() => import('@/pages/admin/finance/dashboard')))}\n  </Suspense>\n</Route>\n\n<Route path=\"/admin/finance/catalog\">\n  <Suspense fallback={<div className=\"p-8 text-center\">Cargando catálogo...</div>}>\n    {React.createElement(React.lazy(() => import('@/pages/admin/finance/catalog')))}\n  </Suspense>\n</Route>",

  "sidebar_navigation": "// Agregar al AdminSidebar.tsx o RoleBasedSidebar.tsx\n// En la sección de módulos:\n\n<ModuleNav \n  title=\"Finanzas\" \n  icon={<DollarSign className=\"h-5 w-5\" />}\n  value=\"finance\"\n>\n  <NavItem \n    href=\"/admin/finance/dashboard\" \n    icon={<BarChart className=\"h-5 w-5\" />}\n    active={location.startsWith('/admin/finance/dashboard')}\n  >\n    Dashboard\n  </NavItem>\n  <NavItem \n    href=\"/admin/finance/catalog\" \n    icon={<BookOpen className=\"h-5 w-5\" />}\n    active={location.startsWith('/admin/finance/catalog')}\n  >\n    Catálogo\n  </NavItem>\n</ModuleNav>",

  "server_registration": "// Agregar en server/index.ts\n// En la sección donde se registran las rutas:\n\nimport { registerFinanceRoutes } from './finance-routes';\n\n// Registrar rutas de finanzas\nregisterFinanceRoutes(app, apiRouter, isAuthenticated);",

  "installation_steps": [
    "1. Crear archivo shared/finance-schema.ts con el contenido proporcionado",
    "2. Agregar las exportaciones al archivo principal shared/schema.ts",
    "3. Crear archivo server/finance-routes.ts con las rutas API",
    "4. Registrar las rutas en server/index.ts",
    "5. Crear la carpeta client/src/pages/admin/finance/",
    "6. Crear los archivos dashboard.tsx y catalog.tsx",
    "7. Agregar las rutas al App.tsx",
    "8. Agregar la navegación al sidebar",
    "9. Ejecutar las consultas SQL para crear las tablas",
    "10. Reiniciar el servidor y probar"
  ],

  "features_summary": {
    "dashboard": "Panel principal con métricas financieras en tiempo real",
    "catalog": "Gestión de categorías de ingresos y egresos",
    "income_tracking": "Registro y seguimiento de ingresos reales",
    "expense_tracking": "Registro y seguimiento de egresos con proveedores",
    "real_time_metrics": "Cálculo automático de balances y totales",
    "responsive_design": "Interfaz adaptada para móvil y escritorio"
  }
}